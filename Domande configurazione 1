C11) Calcolare il throughput medio dei flussi TCP.
Dalla cattura di un qualsiasi nodo attraversati da entrambi i flussi, isolati con i filtri, è possibile vedere che il flusso da n4 a n0 trasmette complessivamente 622500 B (ultimo ACK_no ricevuto), quindi 249 pacchetti di 2500 B, ciascuno frammentato in 4 pacchetti di 590 B e uno di 410 B. 
Il throughput medio di questo flusso risulta pari a (590 * 4 + 410) * 249 / (15-5) = 68973 Bps = 552 kbps. Il flusso da n8 a n2 invia complessivamente 432000 B (anche qui ultimo ACK_no ricevuto dal suo server), cioè 96 pacchetti di 4500 B, frammentati stavolta in 8 pacchetti di 590 B e uno di 266 B. Il throughput medio di questo flusso quindi risulta pari a (590 * 8 + 266) * 96 / (9-2) = 68379 Bps = 547 kbps.
Il throughput medio complessivo dei due flussi è quindi pari a:
[(590*8+266)*96+(590*4+410)*249]/(15-2) = 89876 Bps = 719 kbps

C12) Calcolare il throughput medio del flusso TCP n8 verso n2 a tempo t=6s.
A tempo t = 6s la quantità di bytes trasmessa sul flusso TCP si ricava dai Sequence Numbers e, in particolare, si ricava dall'ACK_no=247501. Quindi finora sono stati inviati e ricevuti 247500/4500=55 pacchetti.
Tali pacchetti, attraversando la rete, vengono però frammentati in 8 pacchetti da 590B e uno da 266B, comportando un TH medio pari a ((590*8 + 266) bytes * 55) / (6-2) s = 68557 Bps = 548 kbps. Tale risultato è confermato dall'analisi dell'I/O Graph di Wireshark relativi alla cattura dei pacchetti inviati da n8.

C13) Calcolare il throughput medio del flusso TCP n8 verso n2 a tempo t=8s. Commentare eventuali cambiamenti rispetto a C12.
A tempo t = 8s il server invia ACK_no=373501 relativo all'ultimo pacchetto ricevuto, quindi in totale i pacchetti inviati da n8 finora sono 373500/4500=83.
Quindi, con la stessa procedura utilizzata in C12, il TH medio risulta pari a ((590*8 + 266) bytes * 83) / (8-2) s = 68973 Bps = 552 kbps.
Come già evidenziato in precedenza in C03, tale risultato, che si discosta di poco dal TH calcolato in C12, ci sembra coerente con il fatto che il livello di congestione della rete è minimo, se non proprio nullo.

C14) [Extra] Ritardo di accodamento vs congestione: Disegnare un grafico che mostri il ritardo di accodamento in funzione del livello di congestione in rete
Scelgo come nodo n3 in riferimento al quale effettuare la mia analisi.
Il nostro calcolo prende in esame i flussi provenienti da n8 a n2 e da n4 a n0. 
Entrambi i flussi utilizzano il collegamento che parte da n6 e arriva a n3.
Calcolo l'intensità di traffico I=La/R con L dimensione media dei pacchetti,a tasso di arrivo dei pacchetti e R bit-rate del link.
Mostro attraverso un grafico il ritardo di accodamento in funzione della congestione calcolato come
I(L/R)(1-I).
Utilizzo uno script Python per calcolare tale grafico. Alleghiamo il file(graphconfig1.py).
I dati sono stati esportati da Wireshark.
Alleghiamo entrambi i files.(10.csv e 192.csv).
Filtri usati: "ip.src==192.138.2.3" e "ip.src==10.0.3.1".


A1) Individuare le varie topologie note che compongono la rete.
In questa rete ci sono delle sottoreti componenti, due rete locali ethernet ciascuna delle quali utilizza un bus
lineare condiviso(topologia a bus lineare).
La rete nel suo complesso può anche essere considerata un albero con radice n3(topologia ad albero).
I collegamenti tra endpoints come quello tra n4 e n5 sono del tipo punto a punto,analogamente sono collegamenti punto a punto anche l0,l1 e l3.
I parametri che distinguono le varie configurazioni non alterano la topologia complessiva della rete e delle sue sottoreti.

A2) Ricostruzione del percorso dei pacchetti attraverso la rete di tutti i flussi simulati usando wireshark evidenziando i filtri utilizzati per isolare i singoli flussi dello strato di trasporto tra le tracce.
In questa configurazione, il primo flusso TCP segue lo stesso percorso già descritto nella precedente configurazione, ad eccezione della parte finale, ad esso però si sovrappone un ulteriore flusso, che parte dal nodo n8 e attraversa tutto il CSMA link attraversando i nodi n7 e n6. In ques'ultimo nodo i due flussi attraversano la stessa sezione della rete, attraversando i nodi n3, tramite il link l1, e n1, tramite il link l0. Infine il flusso partito da n4 termina la propria percorrenza attraversando il CSMA link e venendo mandato al Sink in n0, mentre il flusso partito da n8 termina nel Sink in n2. Per isolare i  flussi tramite Wireshark occorre utilizzare i filtri:
"(tcp.srcport!=7777 &&  tcp.port==7777)" permette di isolare il flusso di pacchetti da n4 a n0
"(tcp.srcport!=2400 &&  tcp.port==2400)" permette di isolare il flusso di pacchetti da n8 a n2
"(tcp.srcport!=7777 && tcp.srcport!=2400)" permette di visualizzare solo i due flussi.

A3) Calcolo e grafico di round trip time (RTT) e commento.

A4) Vi sono dei bottleneck nella rete? Se si, individuare gli eventuali link e discutere eventuali contromisure e soluzioni.
In questa configurazione il bottleneck è il CSMA link della rete locale che contiene il nodo n2 e il nodo n0,che sono i riceventi della comunicazione TCP tra n2 e n8 e tra n0 e n4 perchè il suo Data Rate è quello piu' basso nei collegamenti considerati. Inoltre tale link è anche condiviso dalle due comunicazioni.
Una possibile soluzione a ciò è aumentare la banda trasmissiva del CSMA link in oggetto oppure collegare il nodo n2 o il nodo n0 ad un altro nodo fuori dalla lan o direttamente al destinatario utilizzando un link con sufficiente data rate.
